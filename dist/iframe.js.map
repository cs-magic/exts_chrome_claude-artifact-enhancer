{"version":3,"file":"iframe.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACdA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@cs-magic/exts_chrome_claude-artifact-enhancer/./src/config.ts","webpack://@cs-magic/exts_chrome_claude-artifact-enhancer/./src/core/iframe.ts","webpack://@cs-magic/exts_chrome_claude-artifact-enhancer/./src/utils/const.ts","webpack://@cs-magic/exts_chrome_claude-artifact-enhancer/../../../../packages/frontend-common/dist/element2image.js"],"sourcesContent":["export const config = {\n  svg: {\n    export: {\n      width: {\n        min: 36,\n      },\n    },\n  },\n  png: {\n    export: {\n      ppi: {\n        default: 640, // svg 在 320 导出不够\n      },\n    },\n  },\n};\n","import { Message } from \"@/types/message\";\nimport { element2image } from \"@cs-magic/common-frontend/element2image\";\nimport { action } from \"../utils/const\";\nimport { config } from \"../config\";\n\nconsole.log(\"IFrame script loaded\");\n\n// iframe内的代码\nwindow.addEventListener(\"message\", function (event) {\n  const message = event.data as Message;\n  console.log(\"[iframe receive]: \", message);\n\n  const element = document.documentElement;\n  console.log({ element });\n\n  switch (message.type) {\n    case action.mainRequestIframeCapture:\n      console.log(\"-- iframe capturing\");\n\n      void element2image(document.body, {\n        approach: \"modern-screenshot\",\n        filename: \"iframe-screenshot.png\",\n      });\n\n      break;\n  }\n});\n\nconst observer = new MutationObserver((mutations, observer) => {\n  for (const svgElement of document.querySelectorAll(\"svg\")) {\n    const { width, height } = svgElement.getBBox();\n    if (width < config.svg.export.width.min) continue;\n\n    window.parent.postMessage(\n      {\n        type: action.returnSVG,\n        data: new XMLSerializer().serializeToString(svgElement),\n      } as Message,\n      \"*\",\n    );\n  }\n});\nobserver.observe(document.body, { childList: true, subtree: true });\n","export const IFRAME_URL = \"https://www.claudeusercontent.com\";\nexport const exportElementWrapperString = `<button id=\"export\" class=\"inline-flex items-center justify-center relative shrink-0 ring-offset-2 ring-offset-bg-300 ring-accent-main-100 focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none disabled:drop-shadow-none text-text-200 transition-all font-styrene active:bg-bg-400 hover:bg-bg-500/40 hover:text-text-100 h-8 w-8 rounded-md active:scale-95\" data-state=\"closed\"></button>`;\nexport const exportElementInnerString = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-image-down\"><path d=\"M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21\"/><path d=\"m14 19 3 3v-5.5\"/><path d=\"m17 22 3-3\"/><circle cx=\"9\" cy=\"9\" r=\"2\"/></svg>`;\nexport const triggerElementString = `<div data-radix-popper-content-wrapper=\"\" style=\"position: fixed; left: 0px; top: 0px; transform: translate(1605.5px, 923.5px); min-width: max-content; --radix-popper-transform-origin: 50% 23px; will-change: transform; z-index: 50; --radix-popper-available-width: 1792px; --radix-popper-available-height: 946.5px; --radix-popper-anchor-width: 32px; --radix-popper-anchor-height: 32px;\"><div data-side=\"top\" data-align=\"center\" data-state=\"delayed-open\" class=\"px-2  py-1  text-xs  font-medium  font-sans  leading-tight  rounded-md  shadow-md  text-white  bg-black/80  backdrop-blur  break-words  z-50  max-w-[13rem]  [*:disabled_&amp;]:hidden\" style=\"--radix-tooltip-content-transform-origin: var(--radix-popper-transform-origin); --radix-tooltip-content-available-width: var(--radix-popper-available-width); --radix-tooltip-content-available-height: var(--radix-popper-available-height); --radix-tooltip-trigger-width: var(--radix-popper-anchor-width); --radix-tooltip-trigger-height: var(--radix-popper-anchor-height);\">Download IMG<span id=\"radix-:r1e:\" role=\"tooltip\" style=\"position: absolute; border: 0px; width: 1px; height: 1px; padding: 0px; margin: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); white-space: nowrap; overflow-wrap: normal;\">Download IMG</span></div></div>`;\nexport const ARTIFACT_REACT_ID = \"artifact_react\";\nexport const ARTIFACT_DOWNLOAD_ALL_ID = \"artifact_download_all\";\nexport const ARTIFACT_COPY_PNG_ID = \"artifact_copy_png\";\nexport enum action {\n  mainRequestIframeCapture = \"mainRequestIframeCapture\",\n  mainRequestIframeHtml = \"mainRequestIframeHtml\",\n  iframeReturnCapture = \"iframeReturnCapture\",\n  returnIframeHtml = \"returnIframeHtml\",\n  returnSVG = \"returnSVG\",\n  requestDownloadSvgPng = \"requestDownloadSvgPng\",\n  returnDownloadSvgPng = \"returnDownloadSvgPng\",\n  requestCopyPNG = \"requestCopyPNG\",\n  fetchConversationChats = \"fetchConversationChats\",\n}\nexport const PAGE_DOWNLOAD_ALL_ID = \"download-all\";\n// for artifact copy png\nexport const lucideImagesSvgString = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-images\"><path d=\"M18 22H4a2 2 0 0 1-2-2V6\"/><path d=\"m22 13-1.296-1.296a2.41 2.41 0 0 0-3.408 0L11 18\"/><circle cx=\"12\" cy=\"8\" r=\"2\"/><rect width=\"16\" height=\"16\" x=\"6\" y=\"2\" rx=\"2\"/></svg>`;\n// for artifact download all\nexport const lucideArrowBigDownDashSvgString = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-arrow-big-down-dash\"><path d=\"M15 5H9\"/><path d=\"M15 9v3h4l-7 7-7-7h4V9z\"/></svg>`;\n","import html2canvas from \"html2canvas\";\nimport { domToDataUrl } from \"modern-screenshot\"; // Function to get the maximum width based on viewport\nexport const svgElement2svgString = (svg) => new XMLSerializer().serializeToString(svg);\n// Function to get the maximum width based on viewport\nfunction getMaxWidth() {\n    if (window.innerWidth >= 1280) {\n        return 768; // xl:max-w-[48rem]\n    }\n    else if (window.innerWidth >= 1024) {\n        return 640; // lg:max-w-[40rem]\n    }\n    else if (window.innerWidth >= 768) {\n        return 768; // md:max-w-3xl\n    }\n    return window.innerWidth; // For smaller screens, use full width\n}\nexport const element2image = async (element, { approach = \"modern-screenshot\", filename = \"screenshot\", backgroundColor = \"white\", format = \"jpeg\", } = {}) => {\n    console.log(\"-- element2png start\");\n    let data;\n    const maxWidth = getMaxWidth();\n    // 此时可以进行截图操作\n    switch (approach) {\n        case \"html2canvas\":\n            const canvas = await html2canvas(element, {\n                logging: true,\n                allowTaint: true,\n                useCORS: true, // scrollY: -window.scrollY,\n                height: element.scrollHeight,\n                windowHeight: element.scrollHeight,\n                backgroundColor: backgroundColor, // chatgpt (#171717)\n                scale: 2,\n            });\n            // Crop the canvas if necessary\n            // todo: 剪切还有点问题\n            // if (canvas.width > maxWidth) {\n            //   const croppedCanvas = document.createElement(\"canvas\");\n            //   croppedCanvas.width = maxWidth;\n            //   croppedCanvas.height = canvas.height;\n            //   const ctx = croppedCanvas.getContext(\"2d\");\n            //   const centerShift = (canvas.width - maxWidth) / 2;\n            //   ctx.drawImage(\n            //     canvas,\n            //     centerShift,\n            //     0,\n            //     maxWidth,\n            //     canvas.height,\n            //     0,\n            //     0,\n            //     maxWidth,\n            //     canvas.height,\n            //   );\n            //   data = croppedCanvas.toDataURL(\"image/png\");\n            // } else\n            data = canvas.toDataURL(\"image/jpeg\");\n            break;\n        case \"modern-screenshot\":\n            data = await domToDataUrl(element, {\n                scale: 2,\n                quality: 0.9,\n                backgroundColor: backgroundColor,\n            });\n            break;\n    }\n    const link = document.createElement(\"a\");\n    link.download = filename;\n    link.href = data;\n    link.click();\n    console.log(\"-- element2png end\");\n};\n//# sourceMappingURL=element2image.js.map"],"names":[],"sourceRoot":""}